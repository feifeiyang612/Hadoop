server.port=8080
server.session-timeout=300
logging.level.org.springframework.web=DEBUG
#kafka，更多配置：org.springframework.boot.autoconfigure.kafka.KafkaProperties
#指定kafka 代理地址，可以多个
#spring.kafka.bootstrap-servers=172.21.32.82:9092,172.21.32.83:9093,172.21.32.84:9094
#指定默认topic id
#spring.kafka.template.default-topic=myTopic
#指定listener 容器中的线程数，用于提高并发量
#spring.kafka.listener.concurrency=3
#每次批量发送消息的数量
#spring.kafka.producer.batch-size=1000
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

#指定默认消费者group id
#spring.kafka.consumer.group-id=myGroup1
#若设置为earliest，那么会从头开始读partition
#spring.kafka.consumer.auto-offset-reset=latest
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

kafka.producer.bootstrapServers=172.21.32.82:9092,172.21.32.83:9093,172.21.32.84:9094
kafka.producer.retries=3
#16K
kafka.producer.batchSize=16384
kafka.producer.lingerMs=1
#32M
kafka.producer.bufferMemory=33554432

kafka.consumer.bootstrapServers=172.21.32.82:9092,172.21.32.83:9093,172.21.32.84:9094
kafka.consumer.groupId=0
kafka.consumer.enableAutoCommit=false
kafka.consumer.autoCommitIntervalMs=1000
kafka.consumer.sessionTimeoutMs=30000
kafka.consumer.maxPollRecords=100
#earliest,latest
kafka.consumer.autoOffsetReset=earliest